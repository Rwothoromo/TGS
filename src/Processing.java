import com.itextpdf.text.Chunk;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.Date;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Set;

public class Processing extends javax.swing.JFrame {
    Connection x = null;
    public Processing() {
        initComponents();
        x = connect.dbConnector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGenerateTestimonial = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCourseCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtYrOfEntry = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtYr1 = new javax.swing.JTextField();
        txtSem1 = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        txtRegNo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Testimonial Generating System - Generate a Testimonial");

        btnGenerateTestimonial.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnGenerateTestimonial.setText("Generate Testimonial");
        btnGenerateTestimonial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateTestimonialActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Course Code :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Registration number :");

        txtCourseCode.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Year of Entry :");

        txtYrOfEntry.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel4.setText("Get results up to:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Year  (1, 2 or 3) : ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Semester (1 or 2) :");

        txtYr1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtSem1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        txtRegNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TGS logo 50 x 50.jpg"))); // NOI18N
        jLabel10.setPreferredSize(new java.awt.Dimension(393, 196));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 42)); // NOI18N
        jLabel9.setText("KYAMBOGO ");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 42)); // NOI18N
        jLabel12.setText("UNIVERSITY");

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kyulogo 40x40.jpg"))); // NOI18N
        jLabel11.setText("jLabel9");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel13.setText("Testimonial Generating System");

        jLabel14.setText("Type the details as required to add the user.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel14)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel7))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtYr1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtYrOfEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12))
                            .addComponent(txtRegNo, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCourseCode, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(btnGenerateTestimonial)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(txtSem1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel8))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel12)))
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addComponent(jLabel14)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRegNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCourseCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtYrOfEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(13, 13, 13)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtYr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtSem1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerateTestimonial, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void btnGenerateTestimonialActionPerformed(java.awt.event.ActionEvent evt) {                                                       
//GEN-FIRST:event_btnGenerateTestimonialActionPerformed
        String RegNo = txtRegNo.getText();
        String CourseCode = (txtCourseCode.getText()).toUpperCase();
        String YrOfEntry = txtYrOfEntry.getText();
        String EndYr = txtYr1.getText();
        String EndSem = txtSem1.getText();
        String Database = CourseCode + YrOfEntry;
        String sqlQueryCSD = "select * from CompSciDept where CourseCode=?";
        String sqlQueryDB = "select * from " + Database + " where RegNo='" + RegNo + "'";
        
        Font bold = new Font();
        bold.setStyle("bold");
        Font bold28 = new Font();
        bold28.setStyle("bold");
        bold28.setSize(28);
        Font size8 = new Font();
        size8.setSize(8);
        Font italic18 = new Font();
        italic18.setStyle("italic");
        italic18.setSize(18);
        
        
        try {
            PreparedStatement psCSD = x.prepareStatement(sqlQueryCSD);
            PreparedStatement psDB = x.prepareStatement(sqlQueryDB);
            psCSD.setString(1, CourseCode);
            ResultSet rsCSD = psCSD.executeQuery();
            ResultSet rsDB = psDB.executeQuery();
            
            rsCSD.next();
            rsDB.next();
            
            OutputStream file = new FileOutputStream(new File("D:\\TGS results\\"
                    + Database + "\\" + (rsDB.getString(1) + "_"
                    + rsDB.getString(2) + "_" + rsDB.getString(3)) + ".pdf"));
            Document document = new Document();
            PdfWriter.getInstance(document, file);

            PdfPTable table = new PdfPTable(3);
            table.setWidthPercentage(100);
            float[] columnWidths = {3f, 1f, 3f};
            table.setWidths(columnWidths); 
            Paragraph KY = new Paragraph("KYAMBOGO", bold28);
            PdfPCell KYU1 = new PdfPCell(KY);
            Image image = Image.getInstance("kyulogoEdit.jpg");
            PdfPCell img = new PdfPCell(image, true);
            Paragraph U = new Paragraph("UNIVERSITY", bold28);
            PdfPCell KYU2 = new PdfPCell(U);
            KYU1.setVerticalAlignment(Element.ALIGN_BOTTOM);
            img.setVerticalAlignment(Element.ALIGN_MIDDLE);
            KYU2.setVerticalAlignment(Element.ALIGN_BOTTOM);
            KYU1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            img.setHorizontalAlignment(Element.ALIGN_CENTER);
            KYU2.setHorizontalAlignment(Element.ALIGN_LEFT);
            KYU1.setBorder(Rectangle.NO_BORDER);
            img.setBorder(Rectangle.NO_BORDER);
            KYU2.setBorder(Rectangle.NO_BORDER); 

            Paragraph Contacts = new Paragraph("P.O. BOX 1 KYAMBOGO\n"
                    + "Tel: 256-414-287347, 285001/2, Fax: 256-414-288492\n"
                    + "E-mail:deansci@kyu.ac.ug, www.kyu.ac.ug\n", size8);
            Contacts.setAlignment(Element.ALIGN_CENTER);
            Paragraph DEAN = new Paragraph("Office of the Dean, Faculty of Science", italic18);
            DEAN.setAlignment(Element.ALIGN_CENTER);
            Paragraph testimonial = new Paragraph("PARTIAL TESTIMONIAL\n\n", bold);
            testimonial.setAlignment(Element.ALIGN_CENTER);
            
            Date now = new Date();
            SimpleDateFormat fmt = new SimpleDateFormat("dd MMMM, yyyy");
            String date = fmt.format(now);
            
            document.open();
            document.add(table);
            Add3cells(document, table, KYU1, img, KYU2);
            document.add(Contacts);
            document.add(DEAN);
            document.add(new Paragraph("______________________________________________________________________________\n\n\n", bold));
            document.add(testimonial);
            document.add(new Paragraph("Date                     :      " + date, bold));
            document.add(new Paragraph("Name                   :      " + rsDB.getString(2) + " " + rsDB.getString(3), bold));
            document.add(new Paragraph("Registration No. :      " + rsDB.getString(4), bold));
            document.add(new Paragraph("Programme         :      " + rsCSD.getString(2), bold));
            document.add(new Paragraph("Duration              :      " + rsDB.getString(6) + " years", bold));
            document.add(new Paragraph("Year of Entry       :      " + rsDB.getString(7), bold));
            document.add(new Paragraph("Year of Exit         :      " + rsDB.getString(8), bold));
            document.add(new Paragraph("\n\n"));

            PdfPTable a = new PdfPTable(3); // 3 columns
            float[] a_columnWidths = {7f, 1f, 1f};
            a.setWidths(a_columnWidths);
            PdfPCell a1 = new PdfPCell(new Paragraph("Course Units and grades:", bold));
            PdfPCell a2 = new PdfPCell(new Paragraph("GP", bold));
            PdfPCell a3 = new PdfPCell(new Paragraph("  Grade", bold));
            Add3cells(document, a, a1, a2, a3);
            
            if ("1".equals(EndYr) && "1".equals(EndSem)){
                do11(CourseCode, Database, RegNo, document, rsDB, bold);
                String sqlcmt11 = "select * from " + (Database + "_1_1") + " where RegNo='" + RegNo + "'";
                PreparedStatement pscmt11 = x.prepareStatement(sqlcmt11);
                ResultSet cmt11 = pscmt11.executeQuery();
                cmt11.next();
                Phrase Remark = new Phrase();
                Remark.add(new Chunk("\nHe/She is on "));
                Remark.add(new Chunk((Comment(cmt11.getString(25))), bold));
                Remark.add(new Chunk("These are the provisional Results."));
                document.add(new Paragraph(Remark));
            }
            else if ("1".equals(EndYr) && "2".equals(EndSem)){
                do11(CourseCode, Database, RegNo, document, rsDB, bold);
                do12(CourseCode, Database, RegNo, document, rsDB, bold);
                String sqlcmt12 = "select * from " + (Database + "_1_2") + " where RegNo='" + RegNo + "'";
                PreparedStatement pscmt12 = x.prepareStatement(sqlcmt12);
                ResultSet cmt12 = pscmt12.executeQuery();
                cmt12.next();
                Phrase Remark = new Phrase();
                Remark.add(new Chunk("\nHe/She is on "));
                Remark.add(new Chunk((Comment(cmt12.getString(31))), bold));
                Remark.add(new Chunk("These are the provisional Results."));
                document.add(new Paragraph(Remark));
            }
            else if ("2".equals(EndYr) && "1".equals(EndSem)){
                do11(CourseCode, Database, RegNo, document, rsDB, bold);
                do12(CourseCode, Database, RegNo, document, rsDB, bold);
                do21(CourseCode, Database, RegNo, document, rsDB, bold);
                String sqlcmt21 = "select * from " + (Database + "_2_1") + " where RegNo='" + RegNo + "'";
                PreparedStatement pscmt21 = x.prepareStatement(sqlcmt21);
                ResultSet cmt21 = pscmt21.executeQuery();
                cmt21.next();
                Phrase Remark = new Phrase();
                Remark.add(new Chunk("\nHe/She is on "));
                Remark.add(new Chunk((Comment(cmt21.getString(25))), bold));
                Remark.add(new Chunk("These are the provisional Results."));
                document.add(new Paragraph(Remark));
            }
            else if ("2".equals(EndYr) && "2".equals(EndSem)){
                do11(CourseCode, Database, RegNo, document, rsDB, bold);
                do12(CourseCode, Database, RegNo, document, rsDB, bold);
                do21(CourseCode, Database, RegNo, document, rsDB, bold);
                do22(CourseCode, Database, RegNo, document, rsDB, bold);
                String sqlcmt22 = "select * from " + (Database + "_2_2") + " where RegNo='" + RegNo + "'";
                PreparedStatement pscmt22 = x.prepareStatement(sqlcmt22);
                ResultSet cmt22 = pscmt22.executeQuery();
                cmt22.next();
                Phrase Remark = new Phrase();
                Remark.add(new Chunk("\nHe/She is on "));
                Remark.add(new Chunk((Comment(cmt22.getString(31))), bold));
                Remark.add(new Chunk("These are the provisional Results."));
                document.add(new Paragraph(Remark));
            }
            else if ("3".equals(EndYr) && "1".equals(EndSem)){
                do11(CourseCode, Database, RegNo, document, rsDB, bold);
                do12(CourseCode, Database, RegNo, document, rsDB, bold);
                do21(CourseCode, Database, RegNo, document, rsDB, bold);
                do22(CourseCode, Database, RegNo, document, rsDB, bold);
                do31(CourseCode, Database, RegNo, document, rsDB, bold);
                String sqlcmt31 = "select * from " + (Database + "_3_1") + " where RegNo='" + RegNo + "'";
                PreparedStatement pscmt31 = x.prepareStatement(sqlcmt31);
                ResultSet cmt31 = pscmt31.executeQuery();
                cmt31.next();
                Phrase Remark = new Phrase();
                Remark.add(new Chunk("\nHe/She is on "));
                Remark.add(new Chunk((Comment(cmt31.getString(25))), bold));
                Remark.add(new Chunk("These are the provisional Results."));
                document.add(new Paragraph(Remark));
            }
            else if ("3".equals(EndYr) && "2".equals(EndSem)){
                do11(CourseCode, Database, RegNo, document, rsDB, bold);
                do12(CourseCode, Database, RegNo, document, rsDB, bold);
                do21(CourseCode, Database, RegNo, document, rsDB, bold);
                do22(CourseCode, Database, RegNo, document, rsDB, bold);
                do31(CourseCode, Database, RegNo, document, rsDB, bold);
                do32(CourseCode, Database, RegNo, document, rsDB, bold);
                String sqlcmt32 = "select * from " + (Database + "_3_2") + " where RegNo='" + RegNo + "'";
                PreparedStatement pscmt32 = x.prepareStatement(sqlcmt32);
                ResultSet cmt32 = pscmt32.executeQuery();
                cmt32.next();
                Phrase Remark = new Phrase();
                Remark.add(new Chunk("\nHe/She is on "));
                Remark.add(new Chunk((Comment(cmt32.getString(31))), bold));
                Remark.add(new Chunk("These are the provisional Results."));
                document.add(new Paragraph(Remark));
            }
            
            document.add(new Paragraph("Any assistance rendered to him/her will be highly appreciated."
                    + "\n\n\n\n\n\n\nAssoc. Prof. G. W. Byarugaba-Bazirake                         "
                    + "Date...................................................."));
            document.add(new Paragraph("DEAN", bold));
            document.close();
            file.close();
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler "
                    + "D:\\TGS results\\" + Database + "\\"
                    + (rsDB.getString(1) + "_" + rsDB.getString(2)
                    + "_" + rsDB.getString(3)) + ".pdf");
            //Pops the generated pdf
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnGenerateTestimonialActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        dispose();
        SuperUser SU = new SuperUser();
        SU.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed
    
    public void do11(String CourseCode, String Database, String RegNo, Document document, ResultSet rsDB, Font bold) throws SQLException, DocumentException{
        String sqlQueryDB11 = "select * from " + (Database + "_1_1") + " where RegNo='" + RegNo + "'";
        PreparedStatement psDB11 = x.prepareStatement(sqlQueryDB11);
        ResultSet rsDB11 = psDB11.executeQuery();
        rsDB11.next();

        PdfPTable b = new PdfPTable(1);
        b.setWidthPercentage(100);
        PdfPCell b1 = new PdfPCell(new Paragraph(rsDB.getString(7)
                + "/" + (Integer.parseInt(rsDB.getString(7))+1)
                + " Year One Semester One\n", bold));
        b.addCell(b1);
        document.add(b);

        if ("BITC".equals(CourseCode)){
            BITC11(document, rsDB11, bold);
        }
        else if ("BIS".equals(CourseCode)){
            BIS11(document, rsDB11, bold);
        }
        else if ("DCS".equals(CourseCode)){
            DCS11(document, rsDB11, bold);
        }
        else {
            JOptionPane.showMessageDialog(null, "Invalid details!");
        }

        PdfPTable c = new PdfPTable(1);
        c.setWidthPercentage(100);
        PdfPCell c1 = new PdfPCell(new Paragraph("\n"));
        c.addCell(c1);
        document.add(c);
    }
    
    public void do12(String CourseCode, String Database, String RegNo, Document document, ResultSet rsDB, Font bold) throws SQLException, DocumentException{
        String sqlQueryDB12 = "select * from " + (Database + "_1_2") + " where RegNo='" + RegNo + "'";
        PreparedStatement psDB12 = x.prepareStatement(sqlQueryDB12);
        ResultSet rsDB12 = psDB12.executeQuery();
        rsDB12.next();

        PdfPTable d = new PdfPTable(1);
        d.setWidthPercentage(100);
        PdfPCell d1 = new PdfPCell(new Paragraph(rsDB.getString(7)
                + "/" + (Integer.parseInt(rsDB.getString(7))+1)
                + " Year One Semester Two\n", bold));
        d.addCell(d1);
        document.add(d);

        if ("BITC".equals(CourseCode)){
            BITC12(document, rsDB12, bold);
        }
        else if ("BIS".equals(CourseCode)){
            BIS12(document, rsDB12, bold);
        }
        else if ("DCS".equals(CourseCode)){
            DCS12(document, rsDB12, bold);
        }
        else {
            JOptionPane.showMessageDialog(null, "Invalid Details!");
        }

        PdfPTable e = new PdfPTable(1);
        e.setWidthPercentage(100);
        PdfPCell e1 = new PdfPCell(new Paragraph("\n"));
        e.addCell(e1);
        document.add(e);
    }
    
    public void do21(String CourseCode, String Database, String RegNo, Document document, ResultSet rsDB, Font bold) throws SQLException, DocumentException{
        String sqlQueryDB21 = "select * from " + (Database + "_2_1") + " where RegNo='" + RegNo + "'";
        PreparedStatement psDB21 = x.prepareStatement(sqlQueryDB21);
        ResultSet rsDB21 = psDB21.executeQuery();
        rsDB21.next();

        PdfPTable f = new PdfPTable(1);
        f.setWidthPercentage(100);
        PdfPCell f1 = new PdfPCell(new Paragraph(rsDB.getString(7)
                + "/" + (Integer.parseInt(rsDB.getString(7))+1)
                + " Year Two Semester One\n", bold));
        f.addCell(f1);
        document.add(f);

        if ("BITC".equals(CourseCode)){
            //BITC21(document, rsDB21, bold);
        }
        else if ("BIS".equals(CourseCode)){
            //BIS21(document, rsDB21, bold);
        }
        else if ("DCS".equals(CourseCode)){
            //DCS21(document, rsDB21, bold);
        }
        else {
            JOptionPane.showMessageDialog(null, "Invalid Details!");
        }

        PdfPTable g = new PdfPTable(1);
        g.setWidthPercentage(100);
        PdfPCell g1 = new PdfPCell(new Paragraph("\n"));
        g.addCell(g1);
        document.add(g);
    }
    
    public void do22(String CourseCode, String Database, String RegNo, Document document, ResultSet rsDB, Font bold) throws SQLException, DocumentException{
        String sqlQueryDB22 = "select * from " + (Database + "_2_2") + " where RegNo='" + RegNo + "'";
        PreparedStatement psDB22 = x.prepareStatement(sqlQueryDB22);
        ResultSet rsDB22 = psDB22.executeQuery();
        rsDB22.next();

        PdfPTable d = new PdfPTable(1);
        d.setWidthPercentage(100);
        PdfPCell d1 = new PdfPCell(new Paragraph(rsDB.getString(7)
                + "/" + (Integer.parseInt(rsDB.getString(7))+1)
                + " Year One Semester Two\n", bold));
        d.addCell(d1);
        document.add(d);

        if ("BITC".equals(CourseCode)){
            //BITC22(document, rsDB22, bold);
        }
        else if ("BIS".equals(CourseCode)){
            //BIS22(document, rsDB22, bold);
        }
        else if ("DCS".equals(CourseCode)){
            //DCS22(document, rsDB22, bold);
        }
        else {
            JOptionPane.showMessageDialog(null, "Invalid Details!");
        }

        PdfPTable e = new PdfPTable(1);
        e.setWidthPercentage(100);
        PdfPCell e1 = new PdfPCell(new Paragraph("\n"));
        e.addCell(e1);
        document.add(e);
    }
    
    public void do31(String CourseCode, String Database, String RegNo, Document document, ResultSet rsDB, Font bold) throws SQLException, DocumentException{
        String sqlQueryDB31 = "select * from " + (Database + "_3_1") + " where RegNo='" + RegNo + "'";
        PreparedStatement psDB31 = x.prepareStatement(sqlQueryDB31);
        ResultSet rsDB31 = psDB31.executeQuery();
        rsDB31.next();

        PdfPTable f = new PdfPTable(1);
        f.setWidthPercentage(100);
        PdfPCell f1 = new PdfPCell(new Paragraph(rsDB.getString(7)
                + "/" + (Integer.parseInt(rsDB.getString(7))+1)
                + " Year Two Semester One\n", bold));
        f.addCell(f1);
        document.add(f);

        if ("BITC".equals(CourseCode)){
            //BITC31(document, rsDB31, bold);
        }
        else if ("BIS".equals(CourseCode)){
            //BIS31(document, rsDB31, bold);
        }
        else if ("DCS".equals(CourseCode)){
            //DCS31(document, rsDB31, bold);
        }
        else {
            JOptionPane.showMessageDialog(null, "Invalid Details!");
        }

        PdfPTable g = new PdfPTable(1);
        g.setWidthPercentage(100);
        PdfPCell g1 = new PdfPCell(new Paragraph("\n"));
        g.addCell(g1);
        document.add(g);
    }
        
    public void do32(String CourseCode, String Database, String RegNo, Document document, ResultSet rsDB, Font bold) throws SQLException, DocumentException{
        String sqlQueryDB32 = "select * from " + (Database + "_3_2") + " where RegNo='" + RegNo + "'";
        PreparedStatement psDB32 = x.prepareStatement(sqlQueryDB32);
        ResultSet rsDB32 = psDB32.executeQuery();
        rsDB32.next();

        PdfPTable d = new PdfPTable(1);
        d.setWidthPercentage(100);
        PdfPCell d1 = new PdfPCell(new Paragraph(rsDB.getString(7)
                + "/" + (Integer.parseInt(rsDB.getString(7))+1)
                + " Year One Semester Two\n", bold));
        d.addCell(d1);
        document.add(d);

        if ("BITC".equals(CourseCode)){
            //BITC32(document, rsDB32, bold);
        }
        else if ("BIS".equals(CourseCode)){
            //BIS32(document, rsDB32, bold);
        }
        else if ("DCS".equals(CourseCode)){
            //DCS32(document, rsDB32, bold);
        }
        else {
            JOptionPane.showMessageDialog(null, "Invalid Details!");
        }

        PdfPTable e = new PdfPTable(1);
        e.setWidthPercentage(100);
        PdfPCell e1 = new PdfPCell(new Paragraph("\n"));
        e.addCell(e1);
        document.add(e);
    }
    
    public void BITC11(Document document, ResultSet rsDB11, Font bold) throws DocumentException, SQLException{
        PdfPTable IT111 = new PdfPTable(3);
        float[] IT111_columnWidths = {7f, 1f, 1f};
        IT111.setWidths(IT111_columnWidths);
        PdfPCell IT111a = new PdfPCell(new Paragraph("IT 111 Introduction to Information Technology & Computing"));
        PdfPCell IT111b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(8)))));
        PdfPCell IT111c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(8))));
        Add3cells(document, IT111, IT111a, IT111b, IT111c);

        PdfPTable IT112 = new PdfPTable(3);
        float[] IT112_columnWidths = {7f, 1f, 1f};
        IT112.setWidths(IT112_columnWidths);
        PdfPCell IT112a = new PdfPCell(new Paragraph("IT 112 Micro-Computer Applications"));
        PdfPCell IT112b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(11)))));
        PdfPCell IT112c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(11))));
        Add3cells(document, IT112, IT112a, IT112b, IT112c);

        PdfPTable IT113 = new PdfPTable(3);
        float[] IT113_columnWidths = {7f, 1f, 1f};
        IT113.setWidths(IT113_columnWidths);
        PdfPCell IT113a = new PdfPCell(new Paragraph("IT 113 Discrete Mathematical Structures"));
        PdfPCell IT113b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(14)))));
        PdfPCell IT113c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(14))));
        Add3cells(document, IT113, IT113a, IT113b, IT113c);

        PdfPTable IT114 = new PdfPTable(3);
        float[] IT114_columnWidths = {7f, 1f, 1f};
        IT114.setWidths(IT114_columnWidths);
        PdfPCell IT114a = new PdfPCell(new Paragraph("IT 114 Probability and Statistics"));
        PdfPCell IT114b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(17)))));
        PdfPCell IT114c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(17))));
        Add3cells(document, IT114, IT114a, IT114b, IT114c);

        PdfPTable IT115 = new PdfPTable(3);
        float[] IT115_columnWidths = {7f, 1f, 1f};
        IT115.setWidths(IT115_columnWidths);
        PdfPCell IT115a = new PdfPCell(new Paragraph("IT 115 Differential, Integral and Vector Calculus"));
        PdfPCell IT115b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(20)))));
        PdfPCell IT115c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(20))));
        Add3cells(document, IT115, IT115a, IT115b, IT115c);

        PdfPTable HM111 = new PdfPTable(3);
        float[] HM111_columnWidths = {7f, 1f, 1f};
        HM111.setWidths(HM111_columnWidths);
        PdfPCell HM111a = new PdfPCell(new Paragraph("HM 111 Humanities & Communication Skills"));
        PdfPCell HM111b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(5)))));
        PdfPCell HM111c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(5))));
        Add3cells(document, HM111, HM111a, HM111b, HM111c);

        PdfPTable GPA11 = new PdfPTable(1);
        GPA11.setWidthPercentage(100);
        PdfPCell GPA11a = new PdfPCell(new Paragraph("GPA : " + rsDB11.getString(24), bold));
        GPA11.addCell(GPA11a);
        document.add(GPA11);
    }
    
    public void BIS11(Document document, ResultSet rsDB11, Font bold) throws DocumentException, SQLException{
        PdfPTable IS111 = new PdfPTable(3);
        float[] IS111_columnWidths = {7f, 1f, 1f};
        IS111.setWidths(IS111_columnWidths);
        PdfPCell IS111a = new PdfPCell(new Paragraph("IS 111 Introduction to Information Technology & Computing"));
        PdfPCell IS111b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(8)))));
        PdfPCell IS111c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(8))));
        Add3cells(document, IS111, IS111a, IS111b, IS111c);

        PdfPTable IS112 = new PdfPTable(3);
        float[] IS112_columnWidths = {7f, 1f, 1f};
        IS112.setWidths(IS112_columnWidths);
        PdfPCell IS112a = new PdfPCell(new Paragraph("IS 112 Micro-Computer Applications"));
        PdfPCell IS112b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(11)))));
        PdfPCell IS112c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(11))));
        Add3cells(document, IS112, IS112a, IS112b, IS112c);

        PdfPTable IS113 = new PdfPTable(3);
        float[] IS113_columnWidths = {7f, 1f, 1f};
        IS113.setWidths(IS113_columnWidths);
        PdfPCell IS113a = new PdfPCell(new Paragraph("IS 113 Discrete Mathematical Structures"));
        PdfPCell IS113b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(14)))));
        PdfPCell IS113c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(14))));
        Add3cells(document, IS113, IS113a, IS113b, IS113c);

        PdfPTable IS114 = new PdfPTable(3);
        float[] IS114_columnWidths = {7f, 1f, 1f};
        IS114.setWidths(IS114_columnWidths);
        PdfPCell IS114a = new PdfPCell(new Paragraph("IS 114 Probability and Statistics"));
        PdfPCell IS114b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(17)))));
        PdfPCell IS114c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(17))));
        Add3cells(document, IS114, IS114a, IS114b, IS114c);

        PdfPTable IS115 = new PdfPTable(3);
        float[] IS115_columnWidths = {7f, 1f, 1f};
        IS115.setWidths(IS115_columnWidths);
        PdfPCell IS115a = new PdfPCell(new Paragraph("IS 115 Differential, Integral and Vector Calculus"));
        PdfPCell IS115b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(20)))));
        PdfPCell IS115c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(20))));
        Add3cells(document, IS115, IS115a, IS115b, IS115c);

        PdfPTable HM111 = new PdfPTable(3);
        float[] HM111_columnWidths = {7f, 1f, 1f};
        HM111.setWidths(HM111_columnWidths);
        PdfPCell HM111a = new PdfPCell(new Paragraph("HM 111 Humanities & Communication Skills"));
        PdfPCell HM111b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(5)))));
        PdfPCell HM111c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(5))));
        Add3cells(document, HM111, HM111a, HM111b, HM111c);

        PdfPTable GPA11 = new PdfPTable(1);
        GPA11.setWidthPercentage(100);
        PdfPCell GPA11a = new PdfPCell(new Paragraph("GPA : " + rsDB11.getString(24), bold));
        GPA11.addCell(GPA11a);
        document.add(GPA11);
    }
    
    public void DCS11(Document document, ResultSet rsDB11, Font bold) throws DocumentException, SQLException{
        PdfPTable DCS111 = new PdfPTable(3);
        float[] DCS111_columnWidths = {7f, 1f, 1f};
        DCS111.setWidths(DCS111_columnWidths);
        PdfPCell DCS111a = new PdfPCell(new Paragraph("DCS 111 Introduction to Information Technology & Computing"));
        PdfPCell DCS111b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(8)))));
        PdfPCell DCS111c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(8))));
        Add3cells(document, DCS111, DCS111a, DCS111b, DCS111c);

        PdfPTable DCS112 = new PdfPTable(3);
        float[] DCS112_columnWidths = {7f, 1f, 1f};
        DCS112.setWidths(DCS112_columnWidths);
        PdfPCell DCS112a = new PdfPCell(new Paragraph("DCS 112 Micro-Computer Applications"));
        PdfPCell DCS112b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(11)))));
        PdfPCell DCS112c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(11))));
        Add3cells(document, DCS112, DCS112a, DCS112b, DCS112c);

        PdfPTable DCS113 = new PdfPTable(3);
        float[] DCS113_columnWidths = {7f, 1f, 1f};
        DCS113.setWidths(DCS113_columnWidths);
        PdfPCell DCS113a = new PdfPCell(new Paragraph("DCS 113 Discrete Mathematical Structures"));
        PdfPCell DCS113b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(14)))));
        PdfPCell DCS113c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(14))));
        Add3cells(document, DCS113, DCS113a, DCS113b, DCS113c);

        PdfPTable DCS114 = new PdfPTable(3);
        float[] DCS114_columnWidths = {7f, 1f, 1f};
        DCS114.setWidths(DCS114_columnWidths);
        PdfPCell DCS114a = new PdfPCell(new Paragraph("DCS 114 Probability and Statistics"));
        PdfPCell DCS114b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(17)))));
        PdfPCell DCS114c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(17))));
        Add3cells(document, DCS114, DCS114a, DCS114b, DCS114c);

        PdfPTable DCS115 = new PdfPTable(3);
        float[] DCS115_columnWidths = {7f, 1f, 1f};
        DCS115.setWidths(DCS115_columnWidths);
        PdfPCell DCS115a = new PdfPCell(new Paragraph("DCS 115 Differential, Integral and Vector Calculus"));
        PdfPCell DCS115b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(20)))));
        PdfPCell DCS115c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(20))));
        Add3cells(document, DCS115, DCS115a, DCS115b, DCS115c);

        PdfPTable HM111 = new PdfPTable(3);
        float[] HM111_columnWidths = {7f, 1f, 1f};
        HM111.setWidths(HM111_columnWidths);
        PdfPCell HM111a = new PdfPCell(new Paragraph("HM 111 Humanities & Communication Skills"));
        PdfPCell HM111b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB11.getString(5)))));
        PdfPCell HM111c = new PdfPCell(new Paragraph(GPtoGrade(rsDB11.getString(5))));
        Add3cells(document, HM111, HM111a, HM111b, HM111c);

        PdfPTable GPA11 = new PdfPTable(1);
        GPA11.setWidthPercentage(100);
        PdfPCell GPA11a = new PdfPCell(new Paragraph("GPA : " + rsDB11.getString(24), bold));
        GPA11.addCell(GPA11a);
        document.add(GPA11);
    }
        
    public void BITC12(Document document, ResultSet rsDB12, Font bold) throws DocumentException, SQLException{
        PdfPTable IT121 = new PdfPTable(3);
        float[] IT121_columnWidths = {7f, 1f, 1f};
        IT121.setWidths(IT121_columnWidths);
        PdfPCell IT121a = new PdfPCell(new Paragraph("IT 121 Differential Equations"));
        PdfPCell IT121b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(5)))));
        PdfPCell IT121c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(5))));
        Add3cells(document, IT121, IT121a, IT121b, IT121c);

        PdfPTable IT122 = new PdfPTable(3);
        float[] IT122_columnWidths = {7f, 1f, 1f};
        IT122.setWidths(IT122_columnWidths);
        PdfPCell IT122a = new PdfPCell(new Paragraph("IT 122 Programming Language Fundamentals"));
        PdfPCell IT122b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(8)))));
        PdfPCell IT122c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(8))));
        Add3cells(document, IT122, IT122a, IT122b, IT122c);

        PdfPTable IT123 = new PdfPTable(3);
        float[] IT123_columnWidths = {7f, 1f, 1f};
        IT123.setWidths(IT123_columnWidths);
        PdfPCell IT123a = new PdfPCell(new Paragraph("IT 123 Linear Algebra"));
        PdfPCell IT123b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(11)))));
        PdfPCell IT123c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(11))));
        Add3cells(document, IT123, IT123a, IT123b, IT123c);

        PdfPTable IT124 = new PdfPTable(3);
        float[] IT124_columnWidths = {7f, 1f, 1f};
        IT124.setWidths(IT124_columnWidths);
        PdfPCell IT124a = new PdfPCell(new Paragraph("IT 124 Computer Architecture"));
        PdfPCell IT124b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(14)))));
        PdfPCell IT124c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(14))));
        Add3cells(document, IT124, IT124a, IT124b, IT124c);

        PdfPTable IT125 = new PdfPTable(3);
        float[] IT125_columnWidths = {7f, 1f, 1f};
        IT125.setWidths(IT125_columnWidths);
        PdfPCell IT125a = new PdfPCell(new Paragraph("IT 125 Operating System Concepts"));
        PdfPCell IT125b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(17)))));
        PdfPCell IT125c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(17))));
        Add3cells(document, IT125, IT125a, IT125b, IT125c);

        PdfPTable IT126 = new PdfPTable(3);
        float[] IT126_columnWidths = {7f, 1f, 1f};
        IT126.setWidths(IT126_columnWidths);
        PdfPCell IT126a = new PdfPCell(new Paragraph("IT 126 Computer Management and Maintenance"));
        PdfPCell IT126b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(20)))));
        PdfPCell IT126c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(20))));
        Add3cells(document, IT126, IT126a, IT126b, IT126c);

        PdfPTable GPA12 = new PdfPTable(2);
        GPA12.setWidthPercentage(100);
        PdfPCell GPA12a = new PdfPCell(new Paragraph("GPA : " + rsDB12.getString(24), bold));
        GPA12.addCell(GPA12a);
        PdfPCell GPA12b = new PdfPCell(new Paragraph("CGPA : " + rsDB12.getString(30), bold));
        GPA12.addCell(GPA12b);
        document.add(GPA12);
    }
    
    public void BIS12(Document document, ResultSet rsDB12, Font bold) throws DocumentException, SQLException{
        PdfPTable IS121 = new PdfPTable(3);
        float[] IS121_columnWidths = {7f, 1f, 1f};
        IS121.setWidths(IS121_columnWidths);
        PdfPCell IS121a = new PdfPCell(new Paragraph("IS 121 Differential Equations"));
        PdfPCell IS121b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(5)))));
        PdfPCell IS121c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(5))));
        Add3cells(document, IS121, IS121a, IS121b, IS121c);

        PdfPTable IS122 = new PdfPTable(3);
        float[] IS122_columnWidths = {7f, 1f, 1f};
        IS122.setWidths(IS122_columnWidths);
        PdfPCell IS122a = new PdfPCell(new Paragraph("IS 122 Programming Language Fundamentals"));
        PdfPCell IS122b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(8)))));
        PdfPCell IS122c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(8))));
        Add3cells(document, IS122, IS122a, IS122b, IS122c);

        PdfPTable IS123 = new PdfPTable(3);
        float[] IS123_columnWidths = {7f, 1f, 1f};
        IS123.setWidths(IS123_columnWidths);
        PdfPCell IS123a = new PdfPCell(new Paragraph("IS 123 Linear Algebra"));
        PdfPCell IS123b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(11)))));
        PdfPCell IS123c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(11))));
        Add3cells(document, IS123, IS123a, IS123b, IS123c);

        PdfPTable IS124 = new PdfPTable(3);
        float[] IS124_columnWidths = {7f, 1f, 1f};
        IS124.setWidths(IS124_columnWidths);
        PdfPCell IS124a = new PdfPCell(new Paragraph("IS 124 Computer Architecture"));
        PdfPCell IS124b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(14)))));
        PdfPCell IS124c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(14))));
        Add3cells(document, IS124, IS124a, IS124b, IS124c);

        PdfPTable IS125 = new PdfPTable(3);
        float[] IS125_columnWidths = {7f, 1f, 1f};
        IS125.setWidths(IS125_columnWidths);
        PdfPCell IS125a = new PdfPCell(new Paragraph("IS 125 Operating System Concepts"));
        PdfPCell IS125b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(17)))));
        PdfPCell IS125c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(17))));
        Add3cells(document, IS125, IS125a, IS125b, IS125c);

        PdfPTable IS126 = new PdfPTable(3);
        float[] IS126_columnWidths = {7f, 1f, 1f};
        IS126.setWidths(IS126_columnWidths);
        PdfPCell IS126a = new PdfPCell(new Paragraph("IS 126 Computer Management and Maintenance"));
        PdfPCell IS126b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(20)))));
        PdfPCell IS126c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(20))));
        Add3cells(document, IS126, IS126a, IS126b, IS126c);

        PdfPTable GPA12 = new PdfPTable(2);
        GPA12.setWidthPercentage(100);
        PdfPCell GPA12a = new PdfPCell(new Paragraph("GPA : " + rsDB12.getString(24), bold));
        GPA12.addCell(GPA12a);
        PdfPCell GPA12b = new PdfPCell(new Paragraph("CGPA : " + rsDB12.getString(30), bold));
        GPA12.addCell(GPA12b);
        document.add(GPA12);
    }
    
    public void DCS12(Document document, ResultSet rsDB12, Font bold) throws DocumentException, SQLException{
        PdfPTable DCS121 = new PdfPTable(3);
        float[] DCS121_columnWidths = {7f, 1f, 1f};
        DCS121.setWidths(DCS121_columnWidths);
        PdfPCell DCS121a = new PdfPCell(new Paragraph("DCS 121 Differential Equations"));
        PdfPCell DCS121b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(5)))));
        PdfPCell DCS121c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(5))));
        Add3cells(document, DCS121, DCS121a, DCS121b, DCS121c);

        PdfPTable DCS122 = new PdfPTable(3);
        float[] DCS122_columnWidths = {7f, 1f, 1f};
        DCS122.setWidths(DCS122_columnWidths);
        PdfPCell DCS122a = new PdfPCell(new Paragraph("DCS 122 Programming Language Fundamentals"));
        PdfPCell DCS122b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(8)))));
        PdfPCell DCS122c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(8))));
        Add3cells(document, DCS122, DCS122a, DCS122b, DCS122c);

        PdfPTable DCS123 = new PdfPTable(3);
        float[] DCS123_columnWidths = {7f, 1f, 1f};
        DCS123.setWidths(DCS123_columnWidths);
        PdfPCell DCS123a = new PdfPCell(new Paragraph("DCS 123 Linear Algebra"));
        PdfPCell DCS123b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(11)))));
        PdfPCell DCS123c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(11))));
        Add3cells(document, DCS123, DCS123a, DCS123b, DCS123c);

        PdfPTable DCS124 = new PdfPTable(3);
        float[] DCS124_columnWidths = {7f, 1f, 1f};
        DCS124.setWidths(DCS124_columnWidths);
        PdfPCell DCS124a = new PdfPCell(new Paragraph("DCS 124 Computer Architecture"));
        PdfPCell DCS124b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(14)))));
        PdfPCell DCS124c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(14))));
        Add3cells(document, DCS124, DCS124a, DCS124b, DCS124c);

        PdfPTable DCS125 = new PdfPTable(3);
        float[] DCS125_columnWidths = {7f, 1f, 1f};
        DCS125.setWidths(DCS125_columnWidths);
        PdfPCell DCS125a = new PdfPCell(new Paragraph("DCS 125 Operating System Concepts"));
        PdfPCell DCS125b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(17)))));
        PdfPCell DCS125c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(17))));
        Add3cells(document, DCS125, DCS125a, DCS125b, DCS125c);

        PdfPTable DCS126 = new PdfPTable(3);
        float[] DCS126_columnWidths = {7f, 1f, 1f};
        DCS126.setWidths(DCS126_columnWidths);
        PdfPCell DCS126a = new PdfPCell(new Paragraph("DCS 126 Computer Management and Maintenance"));
        PdfPCell DCS126b = new PdfPCell(new Paragraph(String.valueOf(Float.valueOf(rsDB12.getString(20)))));
        PdfPCell DCS126c = new PdfPCell(new Paragraph(GPtoGrade(rsDB12.getString(20))));
        Add3cells(document, DCS126, DCS126a, DCS126b, DCS126c);

        PdfPTable GPA12 = new PdfPTable(2);
        GPA12.setWidthPercentage(100);
        PdfPCell GPA12a = new PdfPCell(new Paragraph("GPA : " + rsDB12.getString(24), bold));
        GPA12.addCell(GPA12a);
        PdfPCell GPA12b = new PdfPCell(new Paragraph("CGPA : " + rsDB12.getString(30), bold));
        GPA12.addCell(GPA12b);
        document.add(GPA12);
    }
    
    public String GPtoGrade(String x){
        if ("5".equals(x))      { return "   A";   }
        if ("4.5".equals(x))    { return "   B+";  }
        if ("4".equals(x))      { return "   B";   }
        if ("3.5".equals(x))    { return "   B-";  }
        if ("3".equals(x))      { return "   C+";  }
        if ("2.5".equals(x))    { return "   C";   }
        if ("2".equals(x))      { return "   C-";  }
        if ("1.5".equals(x))    { return "   D+";  }
        if ("1".equals(x))      { return "   D";   }
        if ("0.5".equals(x))    { return "   D-";  }
        if ("0".equals(x))      { return "   E";   }
        return x;
        
    }
    
    public String Comment(String x){
        //Create String Array
        String[]Remarks = {"NP", "NP(DL)", "NP (DL)", "VCL"};
        //Instantiate an implementation object
        Set<String>set=new HashSet<String>();
        //Add the elements of the array to the collection
        for (int i = 0; i < Remarks.length; i++){
            set.add(Remarks[i]);
            //Invoke the add method of the collection.
        }
        
        for (Object o : set){
            if (o == "NP"){
                x = "Normal Progress. ";
            }
            else if (o == "NP(DL)" || o == "NP (DL)"){
                x = "Normal Progress (Dean's List). ";
            }
            else if (o == "VCL"){
                x = "Vice Chancellor's List. ";
            }
        }
        return x;
    }
    
    public void Add3cells(Document x, PdfPTable row, PdfPCell cellA, PdfPCell cellB, PdfPCell cellC) throws DocumentException{
        row.setWidthPercentage(100);
        cellB.setHorizontalAlignment(Element.ALIGN_CENTER);
        row.addCell(cellA);
        row.addCell(cellB);
        row.addCell(cellC);
        x.add(row);
    }
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Processing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Processing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Processing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Processing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Processing().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnGenerateTestimonial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtCourseCode;
    private javax.swing.JTextField txtRegNo;
    private javax.swing.JTextField txtSem1;
    private javax.swing.JTextField txtYr1;
    private javax.swing.JTextField txtYrOfEntry;
    // End of variables declaration//GEN-END:variables
}